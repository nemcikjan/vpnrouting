// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vpnrouting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceDiscoveryServiceClient is the client API for ServiceDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceDiscoveryServiceClient interface {
	// Sends a greeting
	GetClosestNode(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type serviceDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceDiscoveryServiceClient(cc grpc.ClientConnInterface) ServiceDiscoveryServiceClient {
	return &serviceDiscoveryServiceClient{cc}
}

func (c *serviceDiscoveryServiceClient) GetClosestNode(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/ServiceDiscoveryService/GetClosestNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceDiscoveryServiceServer is the server API for ServiceDiscoveryService service.
// All implementations must embed UnimplementedServiceDiscoveryServiceServer
// for forward compatibility
type ServiceDiscoveryServiceServer interface {
	// Sends a greeting
	GetClosestNode(context.Context, *ServiceRequest) (*ServiceResponse, error)
	mustEmbedUnimplementedServiceDiscoveryServiceServer()
}

// UnimplementedServiceDiscoveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceDiscoveryServiceServer struct {
}

func (UnimplementedServiceDiscoveryServiceServer) GetClosestNode(context.Context, *ServiceRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClosestNode not implemented")
}
func (UnimplementedServiceDiscoveryServiceServer) mustEmbedUnimplementedServiceDiscoveryServiceServer() {
}

// UnsafeServiceDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceDiscoveryServiceServer will
// result in compilation errors.
type UnsafeServiceDiscoveryServiceServer interface {
	mustEmbedUnimplementedServiceDiscoveryServiceServer()
}

func RegisterServiceDiscoveryServiceServer(s grpc.ServiceRegistrar, srv ServiceDiscoveryServiceServer) {
	s.RegisterService(&ServiceDiscoveryService_ServiceDesc, srv)
}

func _ServiceDiscoveryService_GetClosestNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDiscoveryServiceServer).GetClosestNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceDiscoveryService/GetClosestNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDiscoveryServiceServer).GetClosestNode(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceDiscoveryService_ServiceDesc is the grpc.ServiceDesc for ServiceDiscoveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceDiscoveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceDiscoveryService",
	HandlerType: (*ServiceDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClosestNode",
			Handler:    _ServiceDiscoveryService_GetClosestNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serv_discovery.proto",
}
